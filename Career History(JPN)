**黄 正烈 (ファン・ジョンヨル)**
Junior Database Engineer 📧 sulum@naver.com | 📍 ソウル、韓国

**プロジェクト**

**1. 大規模MySQL/MariaDBクラウド移行 (2024)**
* 役割：50以上のMySQLおよびMariaDBインスタンスのAWS移行をリードしました。
* 技術：MySQL 8.0、MariaDB 10.5、AWS EC2、Xtrabackup
* 概要：Xtrabackupを使用してリアルタイムデータ同期を実装し、99.99%のデータ精度を達成しました。Python 3.8でデータ整合性検証スクリプトを開発し、100TB以上のデータを検証、データ損失ゼロを記録しました。
* 問題解決：EC2コールドコピー方式でクラスター構築時間を40%短縮しましたが、バイナリログレプリケーションの問題により、Xtrabackupで再構築しました。インスタンスあたりの移行時間は2時間から3.5時間に増加しましたが、100%のデータ整合性を確保できました。

**2. AI基盤の自動クエリ最適化システム開発 (2024)**
* 役割：1日平均5,000件のスロークエリを自動的に最適化するシステムを開発しました。
* 技術：Elasticsearch 7.10、AWS RDS、Aurora MySQL、AWS Lambda、EventBridge、Python 3.9
* 概要：体系的なクエリ最適化プロセスを確立し、自動化を実現しました：
  1. スロークエリ収集の自動化
     - AWS EventBridgeを使用してRDSとAurora MySQLからスロークエリログを定期的に収集
     - Lambdaファンクションでクエリの正規化とハッシュ処理を実装し、重複クエリを識別
     - ユニークなハッシュIDを生成しElasticsearchに格納するパイプラインを構築
     - 重複クエリ分析を90%削減し、最適化対象の特定時間を75%短縮
  2. クエリ構造の最適化
     - 複雑な相関サブクエリをLATERAL JOINに変換し、受講履歴照会クエリのパフォーマンスを60%改善
     - 多重ネストサブクエリをJOINに書き換え、講座別受講生統計の集計時間を45%短縮
     - 決済クエリ最適化：date_from、date_toカラム間の明示的な比較条件と複合インデックスを適用し、処理時間を15分から5分に短縮
  3. インデックス最適化
     - 主要検索条件に対する複合インデックス設計でフルテーブルスキャンをインデックススキャンに改善
     - 実行計画分析によるジョイン順序の最適化とテーブルアクセス方式の改善
* 問題解決：
  1. クエリの正規化とハッシュ処理
     - リテラル値をパラメータ化し、同一パターンのクエリをグループ化
     - ハッシュアルゴリズムでクエリパターン別のユニークIDを生成
     - 正規化されたクエリパターンに基づく最適化戦略の自動マッピング
  2. 最適化パターンの自動化
     - EXPLAIN分析を自動化し、実行計画に基づく最適化提案を自動生成
     - テーブルスキーマ情報と連携してインデックス最適化提案の精度を向上

**3. リアルタイムデータベース統合モニタリングシステムの構築 (2024)**
* 役割：100以上のデータベースインスタンスをリアルタイムでモニタリングするシステムを構築しました。
* 技術：Grafana 8.3、Prometheus 2.32、PMM 2.25、Slack API、Telegram API
* 概要：CPU、メモリ、ディスクI/O、スロークエリレートなど8つの主要パフォーマンス指標をリアルタイムで監視するダッシュボードを実装しました。特に指標別の閾値設定とアラート優先順位ロジックを体系化し、運用チームの迅速な対応を可能にしました。
* 問題解決：アラートのフィルタリングと優先順位設定により、1日のアラート数を200回から50回に75%削減しました。

**4. 大規模データベースバックアップ自動化プロジェクト (2023)**
* 役割：62のデータベースインスタンス（MySQL 40、MariaDB 22）の自動バックアップシステムを構築しました。
* 技術：XtraBackup 8.0、MariaBackup 10.5、Python 3.8
* 概要：既存のシェルスクリプトをPythonで書き直し、コードのモジュール化とユニットテストを実装しました。これによりコードの再利用性が向上し、保守時間を月平均20時間から5時間に75%削減しました。手動作業時間も週40時間から2時間に95%削減しました。
* 問題解決：マルチスレッド化による処理時間20%削減を試みましたが、制限に直面しました。代わりにバックアップスケジュール最適化により、全体のバックアップ時間を15%短縮しました。

**5. 社内メッセージデータ収集・保存システムの構築 (2024)**
* 役割：1日約5,000件の社内メッセージデータを自動的に収集・保存するシステムを構築しました。
* 技術：Python 3.9、AWS Lambda、API Gateway、DynamoDB
* 概要：Pythonスクリプトでデータを収集し、API Gatewayを通じて転送、Lambda関数で処理してDynamoDBに保存するプロセスを自動化しました。これにより、データ処理時間を既存比80%短縮しました。
* 問題解決：バッチ処理（20件ずつ処理）を導入してAPIリクエストを90%削減し、Lambda関数のメモリを1024MBから2048MBに増加させて処理速度を50%向上させました。
